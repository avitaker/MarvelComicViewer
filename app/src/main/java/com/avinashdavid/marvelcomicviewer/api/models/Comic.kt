/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: 
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package com.avinashdavid.marvelcomicviewer.api.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import java.util.*

/**
 * @property id The unique ID of the comic resource.
 * @property digitalId The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
 * @property title The canonical title of the comic.
 * @property issueNumber The number of the issue in the series (will generally be 0 for collection formats).
 * @property variantDescription If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
 * @property description The preferred description of the comic.
 * @property modified The date the resource was most recently modified.
 * @property isbn The ISBN for the comic (generally only populated for collection formats).
 * @property upc The UPC barcode number for the comic (generally only populated for periodical formats).
 * @property diamondCode The Diamond code for the comic.
 * @property ean The EAN barcode for the comic.
 * @property issn The ISSN barcode for the comic.
 * @property format The publication format of the comic e.g. comic, hardcover, trade paperback.
 * @property pageCount The number of story pages in the comic.
 * @property textObjects A set of descriptive text blurbs for the comic.
 * @property resourceURI The canonical URL identifier for this resource.
 * @property urls A set of public web site URLs for the resource.
 * @property series A summary representation of the series to which this comic belongs.
 * @property variants A list of variant issues for this comic (includes the \&quot;original\&quot; issue if the current issue is a variant).
 * @property collections A list of collections which include this comic (will generally be empty if the comic&#39;s format is a collection).
 * @property collectedIssues A list of issues collected in this comic (will generally be empty for periodical formats such as \&quot;comic\&quot; or \&quot;magazine\&quot;).
 * @property dates A list of key dates for this comic.
 * @property prices A list of prices for this comic.
 * @property thumbnail The representative image for this comic.
 * @property images A list of promotional images associated with this comic.
 * @property creators A resource list containing the creators associated with this comic.
 * @property characters A resource list containing the characters which appear in this comic.
 * @property stories A resource list containing the stories which appear in this comic.
 * @property events A resource list containing the events in which this comic appears.
 */
@JsonClass(generateAdapter = true)
data class Comic(
    @Json(name = "id") @field:Json(name = "id") var id: Int? = null,
    @Json(name = "digitalId") @field:Json(name = "digitalId") var digitalId: Int? = null,
    @Json(name = "title") @field:Json(name = "title") var title: String? = null,
    @Json(name = "issueNumber") @field:Json(name = "issueNumber") var issueNumber: Double? = null,
    @Json(name = "variantDescription") @field:Json(name = "variantDescription") var variantDescription: String? = null,
    @Json(name = "description") @field:Json(name = "description") var description: String? = null,
    @Json(name = "isbn") @field:Json(name = "isbn") var isbn: String? = null,
    @Json(name = "upc") @field:Json(name = "upc") var upc: String? = null,
    @Json(name = "diamondCode") @field:Json(name = "diamondCode") var diamondCode: String? = null,
    @Json(name = "ean") @field:Json(name = "ean") var ean: String? = null,
    @Json(name = "issn") @field:Json(name = "issn") var issn: String? = null,
    @Json(name = "format") @field:Json(name = "format") var format: String? = null,
    @Json(name = "pageCount") @field:Json(name = "pageCount") var pageCount: Int? = null,
    @Json(name = "textObjects") @field:Json(name = "textObjects") var textObjects: Array<TextObject>? = null,
    @Json(name = "resourceURI") @field:Json(name = "resourceURI") var resourceURI: String? = null,
    @Json(name = "urls") @field:Json(name = "urls") var urls: Array<Url>? = null,
    @Json(name = "series") @field:Json(name = "series") var series: SeriesSummary? = null,
    @Json(name = "variants") @field:Json(name = "variants") var variants: Array<ComicSummary>? = null,
    @Json(name = "collections") @field:Json(name = "collections") var collections: Array<ComicSummary>? = null,
    @Json(name = "collectedIssues") @field:Json(name = "collectedIssues") var collectedIssues: Array<ComicSummary>? = null,
    @Json(name = "dates") @field:Json(name = "dates") var dates: Array<ComicDate>? = null,
    @Json(name = "prices") @field:Json(name = "prices") var prices: Array<ComicPrice>? = null,
    @Json(name = "thumbnail") @field:Json(name = "thumbnail") var thumbnail: Image? = null,
    @Json(name = "images") @field:Json(name = "images") var images: Array<Image>? = null,
    @Json(name = "creators") @field:Json(name = "creators") var creators: CreatorList? = null,
    @Json(name = "characters") @field:Json(name = "characters") var characters: CharacterList? = null,
    @Json(name = "stories") @field:Json(name = "stories") var stories: StoryList? = null,
    @Json(name = "events") @field:Json(name = "events") var events: EventList? = null
) {
    fun coverImage() = images?.firstOrNull()?.imageUrl()
}
